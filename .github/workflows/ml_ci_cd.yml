name: Modelops deploy

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  repository_dispatch:
    types: [ ml_ci_cd ]

jobs:
  ml_ci_cd:
    runs-on: ubuntu-latest
    environment: deploy_ml_diabetes
    strategy:
      matrix:
        python-version: [ "3.8" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare data (download -> data/train.csv)
        shell: bash
        run: |
          set -e
          mkdir -p data model
          if [ -z "${{ github.event.client_payload.dataseturl }}" ]; then
            echo "Falta client_payload.dataseturl"; exit 1
          fi
          echo "Descargando dataset..."
          curl -L "${{ github.event.client_payload.dataseturl }}" -o data/train.csv
          echo "HEAD del dataset:"
          head -n 5 data/train.csv || true

      - name: Train model
        run: |
          python model/train.py --csv data/train.csv --out model/diabetes-model-v1.joblib
          ls -lh model/

      - name: Resolve IMAGE_NAME and TAG_SHA
        shell: bash
        run: |
          # IMAGE_NAME (repo base Ãºnico en Docker Hub)
          if [ -n "${{ github.event.client_payload.MODEL_NAME }}" ]; then
            echo "IMAGE_NAME=${{ github.event.client_payload.MODEL_NAME }}" >> $GITHUB_ENV
          elif [ -n "${{ secrets.MODEL_NAME }}" ]; then
            echo "IMAGE_NAME=${{ secrets.MODEL_NAME }}" >> $GITHUB_ENV
          else
            # fallback sensato
            echo "IMAGE_NAME=sinoeruiz/diabetes-api" >> $GITHUB_ENV
          fi

          # Validar que tenga namespace (user/repo)
          if [[ "$(grep ^IMAGE_NAME= $GITHUB_ENV | cut -d= -f2)" != */* ]]; then
            echo "IMAGE_NAME debe incluir namespace (ej. user/repo)"; cat $GITHUB_ENV; exit 1
          fi

          # TAG_SHA (tag humano de la variante) o github.sha
          if [ -n "${{ github.event.client_payload.sha }}" ]; then
            echo "TAG_SHA=${{ github.event.client_payload.sha }}" >> $GITHUB_ENV
          else
            echo "TAG_SHA=${{ github.sha }}" >> $GITHUB_ENV
          fi

          echo "IMAGE_NAME=$(grep ^IMAGE_NAME= $GITHUB_ENV | cut -d= -f2)"
          echo "TAG_SHA=$(grep ^TAG_SHA= $GITHUB_ENV | cut -d= -f2)"

      - name: Docker build (variant tag + commit tag + latest)
        run: |
          echo "Build: $IMAGE_NAME"
          docker build \
            -t "$IMAGE_NAME:${{ env.TAG_SHA }}" \
            -t "$IMAGE_NAME:${{ github.sha }}" \
            -t "$IMAGE_NAME:latest" \
            .

      - name: Docker login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin

      - name: Docker push
        run: |
          docker push "$IMAGE_NAME:${{ env.TAG_SHA }}"
          docker push "$IMAGE_NAME:${{ github.sha }}"
          docker push "$IMAGE_NAME:latest"
